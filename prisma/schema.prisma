// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id        Int     @id @default(autoincrement())
  wcaUserId Int?
  name      String
  wcaId     String?
  countryId String

  Results       Result[]
  Competitions  Competition[]  @relation("PersonCompetitions")
  Registrations Registration[]

  @@unique([wcaId, countryId])
  @@unique([wcaUserId, countryId])
}

model Result {
  id            Int          @id @default(autoincrement())
  wcaResultId   Int?         @unique
  personId      Int
  registrantId  Int?
  competitionId String
  eventId       String
  roundNumber   Int
  pos           Int?
  best          Int
  average       Int?
  attempts      Int[]
  source        ResultSource
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  Person       Person        @relation(fields: [personId], references: [id])
  Competition  Competition   @relation(fields: [competitionId], references: [wcaId])
  Round        Round         @relation(fields: [competitionId, eventId, roundNumber], references: [competitionId, eventId, number])
  Registration Registration? @relation(fields: [registrantId, competitionId], references: [registrantId, competitionId])
  Records      Records[]

  @@unique([personId, competitionId, eventId, roundNumber], name: "personIdCER")
}

model Records {
  id         Int        @id @default(autoincrement())
  date       String
  eventId    String
  resultId   Int
  type       RecordType
  regionType RegionType
  countryId  String?
  continent  String?
  valid_from String
  valid_to   String?

  Result Result @relation(fields: [resultId], references: [id])

  @@unique([date, eventId, type, countryId, continent])
}

model Round {
  competitionId String
  eventId       String
  number        Int
  type          RoundType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  formatId      String

  Competition Competition @relation(fields: [competitionId], references: [wcaId])
  Results     Result[]

  @@id([competitionId, eventId, number])
  @@unique([competitionId, eventId, type])
}

enum RoundType {
  LEGACY_QUALIFICATION_ROUND
  LEGACY_FIRST_ROUND
  LEGACY_ROUND
  FIRST_ROUND
  SECOND_ROUND
  SEMI_FINAL
  FINAL
}

model Competition {
  id           Int      @default(autoincrement())
  wcaId        String   @id @unique
  name         String
  startDate    String
  endDate      String
  cancelled_at String?
  cityName     String
  countryId    String
  eventIds     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Rounds        Round[]
  Results       Result[]
  Competitors   Person[]       @relation("PersonCompetitions")
  Registrations Registration[]
}

model Registration {
  competitionId String
  personId      Int
  registrantId  Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  status        RegistrationStatus
  eventIds      String[]

  Competition Competition @relation(fields: [competitionId], references: [wcaId])
  Person      Person      @relation(fields: [personId], references: [id])
  Result      Result[]

  @@id([competitionId, personId])
  @@unique([competitionId, registrantId])
}

model Event {
  id    Int    @id @default(autoincrement())
  wcaId String @unique
  name  String
  rank  Int
}

enum ResultSource {
  WCA_OFFICIAL
  WCA_WCIF
  WCA_LIVE
}

enum RegistrationStatus {
  ACCEPTED
  DELETED
}

enum RecordType {
  SINGLE
  AVERAGE
}

enum RegionType {
  WORLD
  CONTINENT
  COUNTRY
  PERSONAL
}
